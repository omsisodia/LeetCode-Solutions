# Intuition
The goal is to traverse the binary tree in postorder, meaning we visit the left subtree, then the right subtree, and finally the root node. This traversal pattern can be implemented using a recursive function that visits each node in the correct order.

# Approach
Start by checking if the root node is nullptr. If it is, return the result list (which is initially empty).
Recursively call the postorderTraversal function on the left subtree.
Recursively call the postorderTraversal function on the right subtree.
After visiting both subtrees, add the value of the current root node to the result list.
Return the result list after the traversal is complete.

# Complexity
Time complexity:
O(n)

Space complexity:
O(n)

# Code

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<int> num={};
    vector<int> postorderTraversal(TreeNode* root) {
        if(root == nullptr) return num;

        postorderTraversal(root->left);
        postorderTraversal(root->right);
        num.push_back(root->val);
        return num;

        
    }
};
