# Intuition
First intution to solve this problem was using nested loops but that would have taken a time complexity of O(n^2). Therefore the second approach was Two Pointer Approach which takes less time.

# Approach
Traversal of array from both ends till left is less than right and comparing it with the target and simultaneously incrementing left and decrementing right.

# Complexity
Time complexity:
O(n)

Space complexity:
O(1)

# Solution 

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {

        int left = 0;
        int right = numbers.size() - 1;

        while(left < right){
            if(numbers[left] + numbers[right] == target){
                return {left+1,right+1};
            }
            else if(numbers[left] + numbers[right] > target) {
                right--;
            }
            else{
                left++;
            }
        }
    return {-1, -1};

    }
};
