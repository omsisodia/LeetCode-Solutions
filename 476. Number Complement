# Intuition
The problem asks to find the bitwise complement of a number. The bitwise complement of a number is found by flipping all bits (0 to 1 and 1 to 0). To achieve this, convert the number to its binary form, flip each bit, and convert the result back to an integer

# Approach
Convert the given number into its binary form.
Flip each bit of the binary string (change '0' to '1' and '1' to '0').
Convert the modified binary string back to a decimal integer.
Return the resulting integer as the complement of the given number.

# Complexity
Time complexity:
O(n)

Space complexity:
O(n)

# Code

class Solution {
public:
    int findComplement(int num) {
        if(num == 0){
            return 0;
        }

        string binary = "";
        
        while(num > 0){
            binary = (num % 2 == 0 ? "0" : "1") + binary;
            num = num/2;
        }
        cout<< binary << endl;

        for(int i = 0; i<binary.size(); i++){
            if(binary[i] == '0'){
                binary[i] = '1';
            }
            else if(binary[i] == '1'){
                binary[i] = '0';
            }
        }

        cout<<binary;

        int result = 0;
        for(int i = 0; i<binary.size(); i++){
            result = result * 2;

            if(binary[i] == '1'){
                result = result + 1;
            }
        }
        return result;

        return 0;
    }
};
